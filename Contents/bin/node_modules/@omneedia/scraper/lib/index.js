/*
 *
 * Omneedia SCRAPER
 * version 1.0.1
 * Copyright (c) 2014-2018 Omneedia
 *
 */

module.exports = function (api) {
    var o = {};

    for (var el in api) {
        var ii = api[el];
        var ss = JSON.stringify(ii.scheme).replace(/"/g, '\\"');
        if (ii.args.length > 0) var args = ii.args.join(',') + ',';
        else var args = "";
        o[el] = new Function(
            'exports',
            'require',
            'module',
            '__filename',
            '__dirname',
            `
            return function(` + args + ` callback) {
                function webscraping(url, db, cbo1, cbo2) {
                    if (cbo2) {
                        var options = cbo1;
                        var cbo = cbo2;
                    } else {
                        var cbo = cbo1;
                    };
                    var ent = require('ent');
                    var cheerio = require('cheerio');
                
                    var type = (function (global) {
                        var cache = {};
                        return function (obj) {
                            var key;
                            return obj === null ? 'null' // null
                                :
                                obj === global ? 'global' // window in browser or global in nodejs
                                :
                                (key = typeof obj) !== 'object' ? key // basic: string, boolean, number, undefined, function
                                :
                                obj.nodeType ? 'object' // DOM element
                                :
                                cache[key = ({}).toString.call(obj)] // cached. date, regexp, error, object, array, math
                                ||
                                (cache[key] = key.slice(8, -1).toLowerCase()); // get XXXX from [object XXXX], and cache it
                        };
                    }(this));
                
                    var root = url.split('://')[1];
                    root = url.split('://')[0] + '://' + root.substr(0, root.indexOf('/'));
                
                    var response = [];
                
                    function article(postprocess, ndx, cb) {
                        if (!postprocess[ndx]) return cb();
                
                        function download(field, uri, x) {
                            global.request(uri, function (e, r, bitmap) {
                                var prepend = "";
                                if (uri.indexOf('.jpg') > -1) prepend = "data:image/jpeg;base64,";
                                if (uri.indexOf('.png') > -1) prepend = "data:image/png;base64,";
                                if (uri.indexOf('.gif') > -1) prepend = "data:image/gif;base64,";
                                value = prepend + new Buffer(bitmap).toString('base64');
                                response[x][field] = value;
                                article(postprocess, ndx + 1, cb);
                            });
                        };
                        var item = postprocess[ndx];
                        download(item.field, item.uri, item.ndx);
                    }
                
                    function scrap($, db, ndx, cb) {
                        if (!db[ndx]) return cb();
                        var str = db[ndx];
                        var field = str.substr(0, str.indexOf('='));
                        if (field.indexOf('!') > -1) field = field.split('!')[1];
                        field = field.split(':')[0];
                        var type = str.substr(0, str.indexOf('=')).split(':')[1].split('=')[0];
                        var data = str.substr(str.indexOf('=') + 1, str.length);
                        var d = data.split('/');
                        var i = 0;
                        //for (var i = 0; i < d.length; i++) {
                
                        var item = d[i].split('(')[1].split(')')[0];
                        var expr = d[i].substr(d[i].indexOf(')') + 1, d[i].length).split('.');
                
                        var j = 0;
                
                        var postprocess = [];
                
                        $(item).each(function () {
                
                            try {
                                if (expr[1]) var value = ent.decode($(this).attr(expr[1]));
                                else var value = ent.decode($(this).html());
                            } catch (e) {
                                if (expr[1]) var value = $(this).attr(expr[1]);
                                else var value = $(this).html();
                            };
                
                            if (!value) value = "";
                
                            value = value.trim();
                
                
                            if (value.indexOf('background-image') > -1) {
                                var img = value.split('url(')[1].split(')')[0];
                                if (img.indexOf('://') == -1) value = root + img;
                
                                postprocess.push({
                                    ndx: j,
                                    field: field,
                                    uri: value
                                });
                            } else {
                                if (type == "blob") {
                                    var img = value;
                                    if (img.indexOf('://') == -1) value = root + img;
                                    postprocess.push({
                                        ndx: j,
                                        field: field,
                                        uri: value
                                    });
                                }
                            }
                
                            if (type == "uri") value = root + value;
                
                            if (d.length > 1) {
                                value = eval(d[1]);
                            };
                
                            var o = {};
                            o[field] = value;
                
                            if (!response[j]) response.push(o);
                            else response[j][field] = value;
                
                            j++;
                        });
                
                        article(postprocess, 0, function () {
                            scrap($, db, ndx + 1, cb);
                        });
                
                        //};
                    };
                    global.request(url, function (e, r, b) {
                
                        const cheerio = require('cheerio')
                        const $ = cheerio.load(b);
                
                        scrap($, db, 0, function () {
                
                            var model = {
                                "type": "raw",
                                "metaData": {
                                    "idProperty": -1,
                                    "totalProperty": "total",
                                    "successProperty": "success",
                                    "root": "data",
                                    "fields": []
                                },
                                "total": response.length,
                                "data": response,
                                "success": true,
                                "message": "OK"
                            };
                
                            for (var j = 0; j < db.length; j++) {
                                var item = db[j];
                                var o = {};
                                if (item.indexOf('!') > -1) {
                                    var field = item.split('!')[1].split(':')[0];
                                    model.metaData.idProperty = field;
                                    o.name = field;
                                    o.type = item.split('!')[1].split(':')[1].split('=')[0];
                                } else {
                                    var field = item.split(':')[0];
                                    o.name = field;
                                    o.type = item.split(':')[1].split('=')[0];
                                };
                                model.metaData.fields.push(o);
                            };
                
                            cbo(model);
                        });
                
                    });
                
                };
                var uri = "` + ii.uri + `";
                var args = JSON.parse('` + JSON.stringify(ii.args) + `');
                var scheme = JSON.parse('` + ss + `');
                for (var i=0;i<args.length;i++) {
                    var replace = '{'+args[i]+'}';
                    var re = new RegExp(replace,"g");
                    uri = uri.replace(re, arguments[i]);
                };
                return webscraping(uri, scheme, callback);

            }`
        )(exports, require, module, __filename, __dirname);

    };
    return o;
};