/*
 *
 * Omneedia SCRAPER
 * version 1.0.1
 * Copyright (c) 2014-2018 Omneedia
 *
 */

module.exports = function (api, config) {
    var o = {};
    for (var el in api.public) {
        o[el] = api.public[el];
    };

    if (api.using) {
        if (api.using == "browser") {
            var Browser = App.using('@omneedia/browser');
            api.Req = async function (url, cb) {
                var b = new Browser({
                    debug: false
                });
                await b.create(url);
                var html = await b.html();
                //console.log(html);
                return cb(html);
            }
        }
    };

    for (var el in api.methods) {
        var ii = api.methods[el];

        if (ii.args.length > 0) var args = ii.args.join(',') + ',';
        else var args = "";

        if (api.vars.root) var root = api.vars.root;
        else var root = "";

        var SCHEME = ii.scheme;

        o[el] = new Function(
            'exports',
            'require',
            'module',
            '__filename',
            '__dirname',
            'SCHEME',
            'ii',
            'api',
            'config',
            `
            return function(` + args + ` callback) {
                var aargs={};
                var _const={};
                for (var i=0;i<arguments.length-1;i++) {
                    if (ii.args[i]) {
                        if( (typeof arguments[i] === "object") && (arguments[i] !== null) ) {
                            for (var el in arguments[i]) aargs[el]=arguments[i][el];
                        } else aargs[ii.args[i]]=arguments[i];
                    }
                };

                if (ii.method=="GET") {
                    for (var i in ii.query) {
                        if (ii.query[i].indexOf) {
                            if (ii.query[i].indexOf('|')>-1) {
                                var v=ii.query[i].split('|')[1];
                                var p=ii.query[i].split('|')[0];
                                if (aargs[p]) ii.query[i]=aargs[p]; else ii.query[i]=v;
                            } else {
                                for (var z in aargs) {
                                    var replace = "{"+z+"}";
                                    var re = new RegExp(replace,"g");
                                    v=ii.query[i].replace(re, aargs[z]);
                                };
                                ii.query[i]=v;
                            }
                        }
                    };
                    
                    var querystring=[];
                    for (var el in ii.query) querystring.push(el+'='+encodeURIComponent(ii.query[el]));
                    querystring='?'+querystring.join('&'); 
                };
                
                if (ii.method=="POST") {
                    for (var i in ii.form) {
                        if (ii.form[i].indexOf) {
                            if (ii.form[i].indexOf('|')>-1) {
                                var v=ii.form[i].split('|')[1];
                                var p=ii.form[i].split('|')[0];
                                if (aargs[p]) ii.form[i]=aargs[p]; else ii.form[i]=v;
                            };
                        }
                    };
                };

                if (typeof arguments[arguments.length-1]==="function") callback=arguments[arguments.length-1];
                function magicdate(d) {
                    //console.log(d);
                    function isValidDate(d) {
                        return d instanceof Date && !isNaN(d);
                    };
                    if (d.indexOf('/')>-1) {
                        try {
                        var y = d.split('/')[2];
                        if (y.toString().length<4) y="20"+y;
                        var m =d.split('/')[1];
                        var dd = d.split('/')[0];
                        var date=new Date(y+'-'+m+'-'+dd);
                        if (isValidDate(date)) return date; else return false;
                        } catch(e) {
                            return false;
                        }
                    }
                };
                function webscraping(url, db, cbo1, cbo2) {
                    if (cbo2) {
                        var options = cbo1;
                        var cbo = cbo2;
                    } else {
                        var cbo = cbo1;
                    };
                    var ent = require('ent');
                    var cheerio = require('cheerio');
                
                    var type = (function (global) {
                        var cache = {};
                        return function (obj) {
                            var key;
                            return obj === null ? 'null' // null
                                :
                                obj === global ? 'global' // window in browser or global in nodejs
                                :
                                (key = typeof obj) !== 'object' ? key // basic: string, boolean, number, undefined, function
                                :
                                obj.nodeType ? 'object' // DOM element
                                :
                                cache[key = ({}).toString.call(obj)] // cached. date, regexp, error, object, array, math
                                ||
                                (cache[key] = key.slice(8, -1).toLowerCase()); // get XXXX from [object XXXX], and cache it
                        };
                    }(this));
                    var root = url.split('://')[1];
                    root = url.split('://')[0] + '://' + root.substr(0, root.indexOf('/'));
                
                    var response = [];
                
                    function article(postprocess, ndx, cb) {
                        if (!postprocess[ndx]) return cb();
                
                        function download(field, uri, x) {
                            global.request(uri, function (e, r, bitmap) {
                                var prepend = "";
                                if (uri.indexOf('.jpg') > -1) prepend = "data:image/jpeg;base64,";
                                if (uri.indexOf('.png') > -1) prepend = "data:image/png;base64,";
                                if (uri.indexOf('.gif') > -1) prepend = "data:image/gif;base64,";
                                value = prepend + new Buffer(bitmap).toString('base64');
                                response[x][field] = value;
                                article(postprocess, ndx + 1, cb);
                            });
                        };
                        var item = postprocess[ndx];
                        download(item.field, item.uri, item.ndx);
                    }

                    function expose(b) {
                        
                        const cheerio = require('cheerio')
                        const $ = cheerio.load(b);
                
                        scrap($, db, 0, function () {
                
                            var model = {
                                "type": "raw",
                                "metaData": {
                                    "idProperty": -1,
                                    "totalProperty": "total",
                                    "successProperty": "success",
                                    "root": "data",
                                    "fields": []
                                },
                                "total": response.length,
                                "data": response,
                                "success": true,
                                "message": "OK"
                            };
                
                            for (var j = 0; j < db.length; j++) {
                                var item = db[j];
                                var o = {};
                                if (item.field) var isID=item.field.indexOf('!'); else var isID=item.indexOf('!');
                                if (isID > -1) {
                                    if (item.field) var field = item.field.split('!')[1].split(':')[0]; else var field = item.split('!')[1].split(':')[0];
                                    model.metaData.idProperty = field;
                                    if (item.field) o.name = item.field; else o.name=item;
                                    if (item.type) o.type=item.type; else o.type = item.split('!')[1].split(':')[1].split('=')[0];
                                } else {
                                    if (item.field) var field = item.field.split(':')[0]; else var field=item.split(':')[0];
                                    if (item.field) o.name = item.field; else o.name=item;
                                    if (item.type) o.type=item.type; else o.type = item.split(':')[1].split('=')[0];
                                };
                                model.metaData.fields.push(o);
                            };

                            var i = response.length;
                            if (model.metaData.idProperty!=-1) {
                                while (i--) {
                                    var item=response[i];
                                    if (!item[model.metaData.idProperty]) response.splice(i, 1);
                                }
                            }
                
                            if (cbo) cbo(model);
                        });
                    };

                    function set_request(e,b,r) {
                        if (querystring) url+=querystring;
                        if (url.lastIndexOf('?')==url.length-1) url=url.substr(0,url.length-1);
                        
                        if (api.Req) {
                            api.Req(url,function(r) {
                                expose(r);
                            })
                        } else global.request({
                            url: url,
                            method: ii.method,
                            form: ii.form,
                            jar: true,
                            headers: {
                                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'
                            }
                        }, function (e, r, b) {
                            if (e) {
                                console.log(e);
                                console.log(url);
                                // a implémenter !
                            } else expose(b);
                        });
                    }
                
                    function scrap($, db, ndx, cb) {
                        function isFunction(functionToCheck) {
                            return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';
                        };
                        if (!db[ndx]) {
                            for (var el in _const) {
                                for (var i=0;i<response.length;i++) {
                                    if (isFunction(_const[el])) response[i][el]=_const[el](response[i],aargs); else response[i][el]=_const[el];
                                }
                            };
                            return cb();
                        };
                        var str = db[ndx];
                        
                        var fn = -1;
                        var proc = -1;

                        if (str.field) {
                            if (str.render) fn = str.render;
                            if (str.process) proc = str.process;
                            var field=str.field;
                            if (field.indexOf('!') > -1) field = field.split('!')[1];
                            field = field.split(':')[0];
                            if (str.value) {
                                _const[field]=str.value;
                            }
                        } else {
                            var field = str.substr(0, str.indexOf('='));
                            if (field.indexOf('!') > -1) field = field.split('!')[1];
                            field = field.split(':')[0];
                        }

                        if (str.type) var type=str.type; else var type = str.substr(0, str.indexOf('=')).split(':')[1].split('=')[0];
                        
                        try {
                            if (str.selector) data='{'+str.selector+'}'; else var data = str.substr(str.indexOf('=') + 1, str.length);
                            var d = data.split('/');
                            var i = 0;
                            var item = d[i].split('{')[1].split('}')[0];
                            var expr = d[i].substr(d[i].indexOf('}') + 1, d[i].length).split('.');
    
                        } catch(e) {

                        }
                        
                        var j = 0;
                        var postprocess = [];

                        if (proc!=-1) {
                            var value=proc($,$(item));
                            var o = {};
                            o[field] = value;
                            if (!response[j]) response.push(o);
                            else response[j][field] = value;
                            return scrap($, db, ndx + 1, cb);
                        };
                
                        $(item).each(function () {
                            if (str.attr) {
                                var value=$(this).attr(str.attr);
                            } else {
                                try {
                                    if (expr[1]) var value = ent.decode($(this).attr(expr[1]));
                                    else {
                                        if (str.output) {
                                            if (str.output=="html") var value = ent.decode($(this).html());
                                            if (str.output=="text") var value = ent.decode($(this).text());
                                        } else var value = ent.decode($(this).html());
                                    }
                                } catch (e) {
                                    if (expr[1]) var value = $(this).attr(expr[1]);
                                    else {
                                        if (str.output) {
                                            if (str.output=="html") var value = $(this).html();
                                            if (str.output=="text") var value = $(this).text();
                                        } else var value = $(this).html();
                                    }
                                };
                            }
                
                            if (!value) value = "";
                
                            value = value.trim();
                
                            if (value.indexOf('background-image') > -1) {
                                var img = value.split('url(')[1].split(')')[0];
                                if (img.indexOf('://') == -1) value = root + img;
                
                                postprocess.push({
                                    ndx: j,
                                    field: field,
                                    uri: value
                                });
                            } else {
                                if (type == "blob") {
                                    var img = value;
                                    if (img.indexOf('://') == -1) value = root + img;
                                    postprocess.push({
                                        ndx: j,
                                        field: field,
                                        uri: value
                                    });
                                }
                            }
                
                            if (type == "uri") value = root + value;
                            if (d.length > 1) {
                                value = eval(d[1]);
                            };
                            if (fn!=-1) value=fn(value,response[j]);

                            if (type == "date") {
                                value=magicdate(value);
                            };
                
                            var o = {};
                            o[field] = value;
                            
                            if (value) {
                                if (!response[j]) response.push(o);
                                else response[j][field] = value;
                            }
                
                            j++;
                        });
                
                        article(postprocess, 0, function () {
                            scrap($, db, ndx + 1, cb);
                        });
                
                        
                    };
                    
                    if (api.login) {
                        for (var el in api.login.form) {
                            for (var z in config) {
                                var replace = "{"+z+"}";
                                var re = new RegExp(replace,"g");
                                api.login.form[el]=api.login.form[el].replace(re, config[z]);
                            }
                            for (var z in api.vars) {
                                var replace = "{"+z+"}";
                                var re = new RegExp(replace,"g");
                                api.login.form[el]=api.login.form[el].replace(re, api.vars[z]);
                            };
                        };
                        
                        global.request({
                            url: api.vars.root+api.login.url,
                            method: api.login.method,
                            jar: true,
                            form: api.login.form
                        },set_request);
                        
                    } else set_request();
                    
                
                };
                var uri=ii.uri;
                var args = ii.args;
                for (var i=0;i<args.length;i++) {
                    var replace = '{'+args[i]+'}';
                    var re = new RegExp(replace,"g");
                    uri = uri.replace(re, arguments[i]);
                };
                if (uri.indexOf('://')==-1) uri = api.vars.root+uri;
                
                var scheme = SCHEME;

                return webscraping(uri, scheme, callback);

            }`
        )(exports, require, module, __filename, __dirname, SCHEME, ii, api, config);

    };
    return o;
};